[gd_scene load_steps=3 format=3 uid="uid://dh0jkpep4cp4u"]

[sub_resource type="GDScript" id="GDScript_uu4a1"]
resource_name = "hand"
script/source = "extends Area2D

var snap_velocity = 15.0

var health = 20
var cards = []
var card_positions = []

func _ready() -> void:
	Global.enemy_hand = self
	$healthDisplay.text = str(health)

func remove_card(card) -> void:
	cards.erase(card)

func update_card_z_values():
	for idx in range(cards.size()):
		cards[idx].set_sprite_z_index(idx)

func empty_card_refs():
	for idx in range(cards.size()):
		cards[idx].queue_free()
	cards = []

func _physics_process(delta: float) -> void:
	for idx in range(cards.size()):
		if cards[idx] != Global.node_being_dragged:
			cards[idx].global_position = lerp(cards[idx].global_position, calculate_position(idx), snap_velocity * delta)

func calculate_position(idx: float) -> Vector2:
	if cards.size() > 1:
		return Vector2(global_position.x + idx / (cards.size() - 1.0) * ($CollisionShape2D.shape.size.x - cards[idx].size.x),
			global_position.y)
	elif cards.size() == 1:
		return Vector2(global_position.x + ($CollisionShape2D.shape.size.x - cards[idx].size.x) / 2.0,
			global_position.y)
	return Vector2.ZERO

func add_card(new_card) -> void:
	cards.append(new_card)

func choose_card() -> Node:
	return cards[0]
	
func damage_enemy(amount: int) -> void:
	if ((health - amount) >= 0):
		health -= amount
	else: 
		health = 0
	$healthDisplay.text = str(health)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_uu4a1"]
size = Vector2(611, 98)

[node name="enemy_hand" type="Area2D"]
script = SubResource("GDScript_uu4a1")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(305.5, 49)
shape = SubResource("RectangleShape2D_uu4a1")
disabled = true

[node name="healthDisplay" type="Label" parent="."]
offset_left = -44.0
offset_top = 53.0
offset_right = -4.0
offset_bottom = 98.0
theme_override_font_sizes/font_size = 32
text = "0"
horizontal_alignment = 2
