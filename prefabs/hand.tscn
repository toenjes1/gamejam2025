[gd_scene load_steps=5 format=3 uid="uid://21g32hmxh8h5"]

[ext_resource type="FontFile" uid="uid://c8w8hvebyg5yk" path="res://assets/PublicPixel.ttf" id="1_a6gvt"]

[sub_resource type="GDScript" id="GDScript_uu4a1"]
resource_name = "hand"
script/source = "extends Area2D

var snap_velocity = 15.0

var health = 15
var cards = []
var card_positions = []

func _ready() -> void:
	Global.hand = self
	$healthDisplay.text = str(health)

func remove_card(card) -> void:
	cards.erase(card)

func update_card_z_values():
	for idx in range(cards.size()):
		cards[idx].set_sprite_z_index(idx)

func empty_card_refs():
	for idx in range(cards.size()):
		cards[idx].queue_free()
	cards = []

func _physics_process(delta: float) -> void:
	for idx in range(cards.size()):
		if cards[idx] != Global.node_being_dragged:
			cards[idx].global_position = lerp(cards[idx].global_position, calculate_position(idx), snap_velocity * delta)

func calculate_position(idx: float) -> Vector2:
	if cards.size() > 1:
		var actual_width = $CollisionShape2D.shape.size.x + cards[idx].size.x * (-6 + min(cards.size() ** 1.45 / 2, 7 / 0.3) * 0.25 + (0.2 if cards.size() == 3 else 0))
		return Vector2(global_position.x + ($CollisionShape2D.shape.size.x - actual_width) / 2.0 + idx / (cards.size() - 1.0) * (actual_width - cards[idx].size.x),
			global_position.y)
	elif cards.size() == 1:
		return Vector2(global_position.x + ($CollisionShape2D.shape.size.x - cards[idx].size.x) / 2.0,
			global_position.y)
	return Vector2.ZERO

func card_got_dropped(card):
	update_card_z_values()
	if Rect2($dropArea/CollisionShape2D.global_position - $dropArea/CollisionShape2D.shape.size / 2.0, $dropArea/CollisionShape2D.shape.size).has_point(get_global_mouse_position()):
		cards.erase(card)
		for idx in range(cards.size()):
			if cards[idx].global_position.x > card.global_position.x:
				cards.insert(idx, card)
				update_card_z_values()
				return
		cards.append(card)
		update_card_z_values()

func add_card(new_card) -> void:
	cards.append(new_card)
	
func damage_player(amount: int) -> void:
	if ((health - amount) >= 0):
		health -= amount
	else: 
		amount = health
		health = 0
	for i in range(amount):
		$healthDisplay.text = str(health+amount-i)
		await get_tree().create_timer(0.05-i*0.002).timeout
	$healthDisplay.text = str(health)


func _on_button_end_round_button_up() -> void:
	if Global.game_phase == 0:
		Global.cycle_phase('player')
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_uu4a1"]
size = Vector2(550, 98)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_a6gvt"]
size = Vector2(898, 245)

[node name="hand" type="Area2D"]
script = SubResource("GDScript_uu4a1")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(275, 49)
shape = SubResource("RectangleShape2D_uu4a1")
disabled = true

[node name="dropArea" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="dropArea"]
position = Vector2(275, 35.5)
shape = SubResource("RectangleShape2D_a6gvt")
disabled = true

[node name="healthDisplay" type="Label" parent="."]
offset_left = -64.0
offset_top = -3.0
offset_right = -4.0
offset_bottom = 42.0
theme_override_fonts/font = ExtResource("1_a6gvt")
theme_override_font_sizes/font_size = 24
text = "0"
horizontal_alignment = 2
