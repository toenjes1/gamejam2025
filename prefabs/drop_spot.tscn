[gd_scene load_steps=6 format=3 uid="uid://cdcpxpfojuaeq"]

[ext_resource type="Texture2D" uid="uid://31opkp4ms3cq" path="res://assets/images/backdrop_elements/border.png" id="1_mwg88"]
[ext_resource type="Texture2D" uid="uid://dkw1k3h357qhx" path="res://assets/images/backdrop_elements/border_hover.png" id="2_lx47d"]
[ext_resource type="FontFile" uid="uid://c8w8hvebyg5yk" path="res://assets/PublicPixel.ttf" id="3_hk8yy"]

[sub_resource type="GDScript" id="GDScript_5g2wd"]
resource_name = "drop_spot"
script/source = "extends Area2D

const max_stack_size: int = 4

const snap_velocity = 15.0
const vertical_offset = 23
@onready var init_size = $CollisionShape2D.shape.size

var is_highlighted = false
var cards = []
var enemy_cards = []
var player_cards_sum = 0
var enemy_cards_sum = 0
var base_value
var base_value_enemy
var is_reversed = false

func _ready() -> void:
	Global.drop_spots.append(self)

func player_is_full() -> bool:
	return cards.size() >= max_stack_size

func enemy_is_full() -> bool:
	return enemy_cards.size() >= max_stack_size

func player_is_empty() -> bool:
	return cards.is_empty()

func enemy_is_empty() -> bool:
	return enemy_cards.is_empty()

func empty_card_refs():
	for idx in range(cards.size()):
		cards[idx].queue_free()
	for idx in range(enemy_cards.size()):
		enemy_cards[idx].queue_free()
	cards = []
	enemy_cards = []

func add_enemy_card(card):
	enemy_cards.append(card)
	if (not base_value_enemy) and Global.is_card_num(card):
		base_value_enemy = Global.get_card_val(card)

func union_genesis_trap(target_drop_spot, of_player, is_union):
	if of_player or not is_union:
		for card in cards:
			cards.erase(card)
			if is_union:
				target_drop_spot.cards.append(card)
			else:
				card.queue_free()
		if not cards.is_empty():
			var tmp = cards[cards.size() - 1]
			cards.erase(tmp)
			if is_union:
				target_drop_spot.cards.append(tmp)
			else:
				tmp.queue_free()
		if is_union:
			target_drop_spot.player_cards_sum += player_cards_sum
			target_drop_spot.set_sum_display(target_drop_spot.player_cards_sum)
		player_cards_sum = 0
		set_sum_display(0)
		base_value = null
		set_type_display()
	if not of_player or not is_union:
		for card in enemy_cards:
			enemy_cards.erase(card)
			if is_union:
				target_drop_spot.enemy_cards.append(card)
			else:
				card.queue_free()
		if not enemy_cards.is_empty():
			var tmp = enemy_cards[enemy_cards.size() - 1]
			enemy_cards.erase(tmp)
			if is_union:
				target_drop_spot.enemy_cards.append(tmp)
			else:
				tmp.queue_free()
		if is_union:
			target_drop_spot.enemy_cards_sum += enemy_cards_sum
			target_drop_spot.set_enemy_sum_display(target_drop_spot.enemy_cards_sum)
		enemy_cards_sum = 0
		set_enemy_sum_display(0)

func activate_trap_card(trap_card, activator) -> bool:
	var card_id = trap_card.card_id
	if Global.card_props[card_id]['is_number']:
		return false
	
	if card_id == 'hal':
		var new_sum = 0
		for card in cards:
			print(card.card_id)
			var is_number = card.half_texture()
			if is_number:
				new_sum += Global.card_props[card.card_id]['value']
		player_cards_sum = new_sum
		set_sum_display(new_sum)
		
		new_sum = 0
		for card in enemy_cards:
			print(card.card_id)
			var is_number = card.half_texture()
			if is_number:
				new_sum += Global.card_props[card.card_id]['value']
		enemy_cards_sum = new_sum
		set_enemy_sum_display(new_sum)
	
	elif card_id == 'nul':
		for card in cards:
			card.null_texture()
		player_cards_sum = 0
		$sum.text = str(player_cards_sum)
		
		for card in enemy_cards:
			card.null_texture()
		enemy_cards_sum = 0
		$enemy_sum.text = str(enemy_cards_sum)
	
	elif card_id == 'jok':
		if cards.size() < 2:
			trap_card.set_sprite_texture(load(\"res://assets/images/cards/0_card.png\"))
			card_id = '0'
		else:
			cards[cards.size() - 1].become_card(cards[cards.size() - 2])
	
	elif card_id == 'rev':
		is_reversed = !is_reversed
	
	elif card_id == 'rig':
		var target_drop_spot = Global.drop_spots[(Global.drop_spots.find(self) + 1) % Global.drop_spots.size()]
		if activator == 'player':
			union_genesis_trap(target_drop_spot, true, true)
		if activator == 'enemy':
			union_genesis_trap(target_drop_spot, false, true)
			
	elif card_id == 'lef':
		var target_drop_spot = Global.drop_spots[(Global.drop_spots.find(self) - 1) % Global.drop_spots.size()]
		if activator == 'player':
			union_genesis_trap(target_drop_spot, true, true)
		if activator == 'enemy':
			union_genesis_trap(target_drop_spot, false, true)
	
	elif card_id == 'swa':
		var min_sum = 200 #viel
		var min_idx = -1
		for i in range(Global.drop_spots.size()):
			if i == Global.drop_spots.find(self) or Global.drop_spots[i].cards.is_empty():
				continue
			if Global.drop_spots[i].player_cards_sum < min_sum:
				min_sum = Global.drop_spots[i].player_cards_sum
				min_idx = i
		var target_spot = Global.drop_spots[min_idx]
		
		var tmp_array = []
		
		for card in target_spot.cards:
			print(card)
			target_spot.cards.erase(card)
			tmp_array.append(card)
		if not target_spot.cards.is_empty():
			var tmp = target_spot.cards[target_spot.cards.size() - 1]
			target_spot.cards.erase(tmp)
			tmp_array.append(tmp)
			
		for card in cards:
			cards.erase(card)
			target_spot.cards.append(card)
		if not cards.is_empty():
			var tmp = cards[cards.size() - 1]
			cards.erase(tmp)
			target_spot.cards.append(tmp)
		
		cards += tmp_array
		
		recalc_player_sum()
		target_spot.recalc_player_sum()
		
		var tmp_val: int = base_value
		base_value = target_spot.base_value
		target_spot.base_value = tmp_val
		
		set_type_display()
		target_spot.set_type_display()
	
	elif card_id == 'gen':
		union_genesis_trap(self, true, false)
		var player_side = Global.spawn_player_card()
		Global.hand.remove_card(player_side)
		cards.append(player_side)
		player_side.turn_to_front()
		var enemy_side = Global.spawn_enemy_card()
		Global.enemy_hand.remove_card(enemy_side)
		enemy_cards.append(enemy_side)
		enemy_side.turn_to_front()
		
		if not Global.card_props[player_side.card_id]['is_number']:
			player_cards_sum = 0
			base_value = null
			activate_trap_card(player_side, 'player')
		if not Global.card_props[enemy_side.card_id]['is_number']:
			enemy_cards_sum = 0
			activate_trap_card(enemy_side, 'enemy')
		if Global.card_props[player_side.card_id]['is_number']:
			player_cards_sum = Global.card_props[player_side.card_id]['value']
			base_value = Global.card_props[player_side.card_id]['value']
		if Global.card_props[enemy_side.card_id]['is_number']:
			enemy_cards_sum = Global.card_props[enemy_side.card_id]['value']
			
		set_sum_display(player_cards_sum)
		set_type_display()
		$enemy_sum.text = '0'
		return true
	return false

func can_place(subject_id, own_stack, enemy_stack, base, checking_highlight) -> bool:
	if checking_highlight and Global.node_being_dragged_is_player != 1:
		return false

	var guard: bool = Rect2($CollisionShape2D.global_position - $CollisionShape2D.shape.size / 2.0, $CollisionShape2D.shape.size).has_point(get_global_mouse_position())
	
	var restriction: bool = true
	if base and Global.card_props[subject_id]['is_number']:
		restriction = base == Global.card_props[subject_id]['value']
	
	if ((checking_highlight and guard != is_highlighted) or guard) and restriction:
		if (not own_stack.is_empty() and own_stack[own_stack.size() - 1].card_id == 'blo') or (not enemy_stack.is_empty() and enemy_stack[enemy_stack.size() - 1].card_id == 'blo'):
			return false
		return true
	return false

func _physics_process(delta: float) -> void:
	for idx in range(cards.size()):
		var desired_pos = global_position + init_size / 2 + Vector2(0.0, idx * vertical_offset)
		cards[idx].global_position = lerp(cards[idx].global_position + cards[idx].size / 2, desired_pos, snap_velocity * delta) - cards[idx].size / 2
	
	if Global.node_being_dragged and can_place(Global.node_being_dragged.card_id, cards, enemy_cards, base_value, true):
		_toggle_highlight()
	
	if enemy_cards.is_empty():
		return
	for idx in range(enemy_cards.size()):
		enemy_cards[idx].global_position = lerp(enemy_cards[idx].global_position, $Sprite2D2.global_position - enemy_cards[idx].size / 2 - Vector2(0, idx * 23), 15 * delta)
		

func card_got_dropped(card) -> void:
	if can_place(card.card_id, cards, enemy_cards, base_value, false):
		cards.append(card)
		card.drop_spotted()
		Global.card_played(card, self)
		card.set_sprite_z_index(cards.size() - 1)
		card.get_parent().move_child(card, -1)
		card.turn_to_back()
		card.dropped_location = self
		$CollisionShape2D.shape.size.y = init_size.y + cards.size() * vertical_offset
		$highlight.visible = false
		is_highlighted = false
		if Global.card_props[card.card_id]['is_number'] and not base_value:
			base_value = Global.card_props[card.card_id]['value']

func _toggle_highlight():
	if is_highlighted:
		$highlight.visible = false
		is_highlighted = false
	else:
		$highlight.visible = true
		is_highlighted = true

func calculate_sum(new_card):
	if Global.card_props[new_card]['is_number']:
		player_cards_sum += Global.card_props[new_card]['value']
		$sum.text = str(player_cards_sum)

func set_type_display():
	if base_value:
		$type.text = str(base_value)
	else:
		$type.text = \"\"

func set_sum_display(input):
	$sum.text = str(input)

func set_enemy_sum_display(input):
	$enemy_sum.text = str(input)
	
func calculate_enemy_sum(new_card):
	if Global.card_props[new_card]['is_number']:
		enemy_cards_sum += Global.card_props[new_card]['value']
		$enemy_sum.text = str(enemy_cards_sum)

func enemy_stack_z_index_update():
	for idx in range(enemy_cards.size()):
		enemy_cards[idx].set_sprite_z_index(idx)

func recalc_player_sum():
	var new_sum = 0
	for card in cards:
		if Global.card_props[card.card_id]['is_number']:
			new_sum += Global.card_props[card.card_id]['value']
	player_cards_sum = new_sum
	set_sum_display(new_sum)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5g2wd"]
size = Vector2(108, 149)

[node name="drop_spot" type="Area2D"]
script = SubResource("GDScript_5g2wd")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(54, 75)
shape = SubResource("RectangleShape2D_5g2wd")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(54, 75)
scale = Vector2(2, 2)
texture = ExtResource("1_mwg88")

[node name="Sprite2D2" type="Sprite2D" parent="."]
z_index = -1
position = Vector2(54, -75)
scale = Vector2(2, 2)
texture = ExtResource("1_mwg88")

[node name="highlight" type="Sprite2D" parent="."]
visible = false
position = Vector2(54, 75)
scale = Vector2(2, 2)
texture = ExtResource("2_lx47d")

[node name="type" type="Label" parent="."]
offset_left = 119.0
offset_top = 111.0
offset_right = 159.0
offset_bottom = 134.0
theme_override_fonts/font = ExtResource("3_hk8yy")

[node name="sum" type="Label" parent="."]
offset_left = 115.0
offset_top = 18.0
offset_right = 155.0
offset_bottom = 41.0
theme_override_fonts/font = ExtResource("3_hk8yy")
text = "0"

[node name="enemy_sum" type="Label" parent="."]
offset_left = 115.0
offset_top = -39.0
offset_right = 155.0
offset_bottom = -16.0
theme_override_fonts/font = ExtResource("3_hk8yy")
text = "0"

[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
