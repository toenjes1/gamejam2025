[gd_scene load_steps=5 format=3 uid="uid://cdcpxpfojuaeq"]

[ext_resource type="Texture2D" uid="uid://31opkp4ms3cq" path="res://assets/images/backdrop_elements/border.png" id="1_mwg88"]
[ext_resource type="Texture2D" uid="uid://dkw1k3h357qhx" path="res://assets/images/backdrop_elements/border_hover.png" id="2_lx47d"]

[sub_resource type="GDScript" id="GDScript_5g2wd"]
resource_name = "drop_spot"
script/source = "extends Area2D

const max_stack_size: int = 4

const snap_velocity = 15.0
const vertical_offset = 23
@onready var init_size = $CollisionShape2D.shape.size

var is_highlighted = false
var cards = []
var enemy_cards = []
var player_cards_sum = 0
var enemy_cards_sum = 0
var base_value
var base_value_enemy
var restriction: bool

func _ready() -> void:
	Global.drop_spots.append(self)

func player_is_full() -> bool:
	return cards.size() >= max_stack_size

func enemy_is_full() -> bool:
	return enemy_cards.size() >= max_stack_size

func player_is_empty() -> bool:
	return cards.is_empty()

func enemy_is_empty() -> bool:
	return enemy_cards.is_empty()

func empty_card_refs():
	for idx in range(cards.size()):
		cards[idx].queue_free()
	for idx in range(enemy_cards.size()):
		enemy_cards[idx].queue_free()
	cards = []
	enemy_cards = []
	
func special_is_restricted(card_id) -> bool:
	if not Global.card_props[card_id]['is_number']:
		if card_id == 'hal':
			return false
		return false
	else:
		return true

func activate_trap_card(card_id) -> void:
	if Global.card_props[card_id]['is_number']:
		return
	
	if card_id == 'hal':
		var new_sum = 0
		for card in cards:
			var is_number = card.half_texture()
			if is_number:
				new_sum += Global.card_props[card.card_id]['value']
		player_cards_sum = new_sum
		$sum.text = str(player_cards_sum)
		
		new_sum = 0
		for card in enemy_cards:
			var is_number = card.half_texture()
			if is_number:
				new_sum += Global.card_props[card.card_id]['value']
		enemy_cards_sum = new_sum
		$enemy_sum.text = str(enemy_cards_sum)
		

func _physics_process(delta: float) -> void:
	for idx in range(cards.size()):
		var desired_pos = global_position + init_size / 2 + Vector2(0.0, idx * vertical_offset)
		cards[idx].global_position = lerp(cards[idx].global_position + cards[idx].size / 2, desired_pos, snap_velocity * delta) - cards[idx].size / 2
	
	if !Global.node_being_dragged or Global.node_being_dragged_is_player != 1:
		return
	
	var guard: bool = Rect2($CollisionShape2D.global_position - $CollisionShape2D.shape.size / 2.0, $CollisionShape2D.shape.size).has_point(get_global_mouse_position())
	
	if not special_is_restricted(Global.node_being_dragged.card_id) or not base_value:
		restriction = true
	else:
		restriction = base_value == Global.card_props[Global.node_being_dragged.card_id]['value']
	
	if guard != is_highlighted and restriction:
		_toggle_highlight()

func card_got_dropped(card) -> void:
	var guard: bool = Rect2($CollisionShape2D.global_position - $CollisionShape2D.shape.size / 2.0, $CollisionShape2D.shape.size).has_point(get_global_mouse_position())
	
	if not base_value or not special_is_restricted(card.card_id):
		restriction = true
	else:
		restriction = base_value == Global.card_props[card.card_id]['value']

	if guard and restriction:
		cards.append(card)
		card.drop_spotted()
		card.set_sprite_z_index(cards.size() - 1)
		card.get_parent().move_child(card, -1)
		card.turn_to_back()
		card.dropped_location = self
		$CollisionShape2D.shape.size.y = init_size.y + cards.size() * vertical_offset
		$highlight.visible = false
		is_highlighted = false
		if Global.card_props[card.card_id]['is_number'] and not base_value:
			base_value = Global.card_props[card.card_id]['value']
		activate_trap_card(card.card_id)

func _toggle_highlight():
	if is_highlighted:
		$highlight.visible = false
		is_highlighted = false
	else:
		$highlight.visible = true
		is_highlighted = true

func calculate_sum(new_card):
	if Global.card_props[new_card]['is_number']:
		player_cards_sum += Global.card_props[new_card]['value']
		$sum.text = str(player_cards_sum)

func set_type_display():
	if base_value:
		$type.text = str(base_value)
	
func calculate_enemy_sum(new_card):
	if Global.card_props[new_card]['is_number']:
		enemy_cards_sum += Global.card_props[new_card]['value']
		$enemy_sum.text = str(enemy_cards_sum)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5g2wd"]
size = Vector2(108, 149)

[node name="drop_spot" type="Area2D"]
script = SubResource("GDScript_5g2wd")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(54, 75)
shape = SubResource("RectangleShape2D_5g2wd")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(54, 75)
scale = Vector2(2.3, 2.3)
texture = ExtResource("1_mwg88")

[node name="Sprite2D2" type="Sprite2D" parent="."]
z_index = -1
position = Vector2(54, -75)
scale = Vector2(2.26744, 2.26744)
texture = ExtResource("1_mwg88")

[node name="highlight" type="Sprite2D" parent="."]
visible = false
position = Vector2(54, 75)
scale = Vector2(2.3, 2.3)
texture = ExtResource("2_lx47d")

[node name="type" type="Label" parent="."]
offset_left = 119.0
offset_top = 111.0
offset_right = 159.0
offset_bottom = 134.0

[node name="sum" type="Label" parent="."]
offset_left = 115.0
offset_top = 18.0
offset_right = 155.0
offset_bottom = 41.0
text = "0"

[node name="enemy_sum" type="Label" parent="."]
offset_left = 115.0
offset_top = -39.0
offset_right = 155.0
offset_bottom = -16.0
text = "0"

[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
